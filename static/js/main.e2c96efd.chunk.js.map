{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","src","alt","CardList","console","log","map","robot","idx","key","username","Scroll","props","style","overflowY","height","children","SearchBox","searchChange","aria-label","type","placeholder","onChange","ErrorBoundry","state","hasError","info","this","setState","React","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e2c96efd.chunk.js","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants.js\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    // return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  console.log(\"CardList\");\r\n  return (\r\n    <div>\r\n      {robots.map((robot, idx) => {\r\n        return (\r\n          <Card\r\n            key={idx}\r\n            id={robot.id}\r\n            name={robot.name}\r\n            username={robot.username}\r\n            email={robot.email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        height: \"600px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  console.log(\"SearchBox\");\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        aria-label=\"Search Robots\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search Robots\"\r\n        onChange={searchChange}\r\n      />\r\n      ;\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    return this.state.hasError ? (\r\n      //This message will be displayed when the application is in production.\r\n      <h1>Ooops. That is not good.</h1>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from \"react\";\r\n\r\nclass CounterButton extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0,\r\n    };\r\n  }\r\n\r\n  /*  \r\n    React component will re-render automatically whenever the parent renders, even if its props didn't change.\r\n    So, trying to avoid innecesarily re-render is a big win when it comes to performance. \r\n\r\n    When you extend a class component from React.PureComponent, then that component will\r\n    re-render only when its props actually change (much like a stateless or functional component does).\r\n    But PureComponent does something call shallow comparation which can be tricky (some changes could be\r\n    overlooked because of this).\r\n\r\n    Instead you can use shouldComponentUpdate() for the same purpose and even get a little bit of control by\r\n    running some logic using nextProps and nextState to determine when to render. Keep in mind that this \r\n    add an additional penalty to performance because it runs before each render (make sure to use it\r\n    when is more likely to avoid render in most cases)\r\n\r\n    NOTE: there's a tool call \"Why you did update\" that tells you in the console when you are rendering \r\n    some component but without any change in props... so it show you avoidable re-renders (development\r\n    purpose only). https://github.com/maicki/why-did-you-update\r\n  */\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    //console.log(nextProps, nextState);\r\n    if (this.state.count !== nextState.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  updateCount = () => {\r\n    this.setState((state) => {\r\n      return { count: state.count + 1 };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(\"CounterButton\");\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount}>\r\n        Count:{this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React from \"react\";\r\nimport CounterButton from \"./CounterButton\";\r\nclass Header extends React.Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Header\");\r\n    return (\r\n      <div>\r\n        <h1 className=\"f2\">RoboFriends</h1>;\r\n        <CounterButton color=\"red\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./App.css\";\r\n\r\nimport CardList from \"../components/CardList\";\r\nimport Scroll from \"../components/Scroll\";\r\n//import { robots } from \"./robots.js\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport Header from \"../components/Header\";\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ? (\r\n      <h1 className=\"tc f2\">Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <Header />\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />;\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => {\r\n      dispatch(setSearchField(event.target.value));\r\n    },\r\n    //onRequestRobots: () => requestRobots(dispatch),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants.js\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\n//export const requestRobots = (dispatch) => {\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\").then((response) =>\r\n    response\r\n      .json()\r\n      .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch((error) =>\r\n        dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n      )\r\n  );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\n//import { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { searchRobots, requestRobots } from \"./reducers.js\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n//const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n/* \nhttps://mariosfakiolas.com/blog/my-react-components-render-twice-and-drive-me-crazy/\nThis StrictMode intentionally invoking the render() twice (and some other functions)  \nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n */\n"],"sourceRoot":""}